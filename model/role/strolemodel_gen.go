// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package role

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	rpcRole "github.com/bearllflee/scholar-track/role/role"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	stRoleFieldNames          = builder.RawFieldNames(&StRole{})
	stRoleRows                = strings.Join(stRoleFieldNames, ",")
	stRoleRowsExpectAutoSet   = strings.Join(stringx.Remove(stRoleFieldNames, "`created_at`", "`created_time`", "`updated_at`", "`updated_time`"), ",")
	stRoleRowsWithPlaceHolder = strings.Join(stringx.Remove(stRoleFieldNames, "`id`", "`created_at`", "`created_time`", "`updated_at`", "`updated_time`"), "=?,") + "=?"

	cacheStRoleIdPrefix = "cache:stRole:id:"
)

type (
	stRoleModel interface {
		Insert(ctx context.Context, data *StRole) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*StRole, error)
		Update(ctx context.Context, data *StRole) error
		Delete(ctx context.Context, id uint64) error
		FindRoleTree(ctx context.Context, in *rpcRole.RoleTreeReq) (uint64, []*RoleTree, error)
	}

	defaultStRoleModel struct {
		sqlc.CachedConn
		table string
	}

	StRole struct {
		Id        uint64       `db:"id"`
		CreatedAt time.Time    `db:"created_at"` // 创建时间
		UpdatedAt time.Time    `db:"updated_at"` // 更新时间
		DeletedAt sql.NullTime `db:"deleted_at"` // 删除时间
		RoleName  string       `db:"role_name"`  // 角色名称
		ParentId  uint64       `db:"parent_id"`  // 父角色
	}
	RoleTree struct {
		Role     *StRole
		Children []*RoleTree `json:"children"`
	}
)

func newStRoleModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultStRoleModel {
	return &defaultStRoleModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`st_role`",
	}
}

func (m *defaultStRoleModel) Delete(ctx context.Context, id uint64) error {
	stRoleIdKey := fmt.Sprintf("%s%v", cacheStRoleIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, stRoleIdKey)
	return err
}

func (m *defaultStRoleModel) FindOne(ctx context.Context, id uint64) (*StRole, error) {
	stRoleIdKey := fmt.Sprintf("%s%v", cacheStRoleIdPrefix, id)
	var resp StRole
	err := m.QueryRowCtx(ctx, &resp, stRoleIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", stRoleRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStRoleModel) Insert(ctx context.Context, data *StRole) (sql.Result, error) {
	stRoleIdKey := fmt.Sprintf("%s%v", cacheStRoleIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, stRoleRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.DeletedAt, data.RoleName, data.ParentId)
	}, stRoleIdKey)
	return ret, err
}

func (m *defaultStRoleModel) Update(ctx context.Context, data *StRole) error {
	stRoleIdKey := fmt.Sprintf("%s%v", cacheStRoleIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, stRoleRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DeletedAt, data.RoleName, data.ParentId, data.Id)
	}, stRoleIdKey)
	return err
}

func (m *defaultStRoleModel) FindRoleTree(ctx context.Context, in *rpcRole.RoleTreeReq) (uint64, []*RoleTree, error) {
	// 构建查询参数
	var conditions []string
	var args []any
	args = append(args, in.ParentId)
	if in.RoleName != "" {
		conditions = append(conditions, "`role_name` like ?")
		args = append(args, "%"+in.RoleName+"%")
	}
	whereClause := "where deleted_at is null and `parent_id` = ?"
	if len(conditions) > 0 {
		whereClause += " and " + strings.Join(conditions, " and ")
	}
	query := fmt.Sprintf("select %s from %s %s order by `created_at` desc limit ?, ?", stRoleRows, m.table, whereClause)
	// 1. 先按照role_name、parent_id为0查询
	// 2. 先返回count(*)

	var total uint64
	err := m.QueryRowNoCacheCtx(ctx, &total, "select count(*) from "+m.table+" "+whereClause, args...)
	if err != nil {
		return 0, nil, err
	}
	// 3. 再按照role_name、parent_id为0查询
	var resp []*StRole
	args = append(args, (in.Page-1)*in.PageSize, in.PageSize)
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, args...)
	if err != nil {
		return 0, nil, err
	}
	// 4. 递归查询子角色
	var roleTreeList []*RoleTree
	for _, role := range resp {
		_, children, err := m.FindRoleTree(ctx, &rpcRole.RoleTreeReq{
			RoleName: "",
			Page:     1,
			PageSize: 10000,
			ParentId: role.Id,
		})
		if err != nil {
			return 0, nil, err
		}
		roleTreeList = append(roleTreeList, &RoleTree{
			Role:     role,
			Children: children,
		})
	}
	return total, roleTreeList, nil
}

func (m *defaultStRoleModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheStRoleIdPrefix, primary)
}

func (m *defaultStRoleModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", stRoleRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultStRoleModel) tableName() string {
	return m.table
}
